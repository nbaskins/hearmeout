
hearmeout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031a4  080031a4  000041a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0000502c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031b4  080031b4  0000502c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031b4  080031b4  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031bc  080031bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080031c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000002c  080031ec  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080031ec  000050a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b60e  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cde  00000000  00000000  0001066a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00012348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000983  00000000  00000000  00012fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6db  00000000  00000000  0001392b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf48  00000000  00000000  00032006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc30b  00000000  00000000  0003df4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000fa29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fd61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800318c 	.word	0x0800318c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	0800318c 	.word	0x0800318c

08000218 <_ZN10TransducerC1EP17TIM_HandleTypeDeftth>:

public:
	Transducer() = default;

	// creates transducer object
	Transducer(TIM_HandleTypeDef* tim_in, uint16_t pwm_channel_in, uint16_t sample_channel_in, uint8_t spp_in)
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	460b      	mov	r3, r1
 8000228:	80fb      	strh	r3, [r7, #6]
 800022a:	4613      	mov	r3, r2
 800022c:	80bb      	strh	r3, [r7, #4]
		: tim(tim_in), pwm_channel(pwm_channel_in), sample_channel(sample_channel_in), samples_per_period(spp_in) {
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	88fa      	ldrh	r2, [r7, #6]
 8000238:	809a      	strh	r2, [r3, #4]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	88ba      	ldrh	r2, [r7, #4]
 800023e:	80da      	strh	r2, [r3, #6]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	7e3a      	ldrb	r2, [r7, #24]
 8000244:	721a      	strb	r2, [r3, #8]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	2200      	movs	r2, #0
 800024a:	725a      	strb	r2, [r3, #9]
		// start pwm generation on pwm_channel
		HAL_TIM_PWM_Start(tim, pwm_channel);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	889b      	ldrh	r3, [r3, #4]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f001 fe5a 	bl	8001f10 <HAL_TIM_PWM_Start>

		// configure sample callback frequency
		__HAL_TIM_SET_COMPARE(tim, sample_channel, tim->Instance->ARR / spp_in);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	88db      	ldrh	r3, [r3, #6]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10b      	bne.n	800027c <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0x64>
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800026c:	7e3a      	ldrb	r2, [r7, #24]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	fbb1 f2f2 	udiv	r2, r1, r2
 8000278:	635a      	str	r2, [r3, #52]	@ 0x34
 800027a:	e04a      	b.n	8000312 <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xfa>
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	88db      	ldrh	r3, [r3, #6]
 8000280:	2b04      	cmp	r3, #4
 8000282:	d10b      	bne.n	800029c <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0x84>
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800028c:	7e3a      	ldrb	r2, [r7, #24]
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	fbb1 f2f2 	udiv	r2, r1, r2
 8000298:	639a      	str	r2, [r3, #56]	@ 0x38
 800029a:	e03a      	b.n	8000312 <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xfa>
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	88db      	ldrh	r3, [r3, #6]
 80002a0:	2b08      	cmp	r3, #8
 80002a2:	d10b      	bne.n	80002bc <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xa4>
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80002ac:	7e3a      	ldrb	r2, [r7, #24]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80002b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80002ba:	e02a      	b.n	8000312 <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xfa>
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	88db      	ldrh	r3, [r3, #6]
 80002c0:	2b0c      	cmp	r3, #12
 80002c2:	d10b      	bne.n	80002dc <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xc4>
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80002cc:	7e3a      	ldrb	r2, [r7, #24]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80002d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80002da:	e01a      	b.n	8000312 <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xfa>
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	88db      	ldrh	r3, [r3, #6]
 80002e0:	2b10      	cmp	r3, #16
 80002e2:	d10b      	bne.n	80002fc <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xe4>
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80002ec:	7e3a      	ldrb	r2, [r7, #24]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	fbb1 f2f2 	udiv	r2, r1, r2
 80002f8:	649a      	str	r2, [r3, #72]	@ 0x48
 80002fa:	e00a      	b.n	8000312 <_ZN10TransducerC1EP17TIM_HandleTypeDeftth+0xfa>
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000304:	7e3a      	ldrb	r2, [r7, #24]
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	fbb1 f2f2 	udiv	r2, r1, r2
 8000310:	64da      	str	r2, [r3, #76]	@ 0x4c
		HAL_TIM_OC_Start_IT(tim, sample_channel);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	88db      	ldrh	r3, [r3, #6]
 800031a:	4619      	mov	r1, r3
 800031c:	4610      	mov	r0, r2
 800031e:	f001 fc53 	bl	8001bc8 <HAL_TIM_OC_Start_IT>

		is_initialized = true;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2201      	movs	r2, #1
 8000326:	725a      	strb	r2, [r3, #9]
	};
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	4618      	mov	r0, r3
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <_ZN10Transducer10play_soundEf>:

	// plays a sound given an audio sample
	void play_sound(float sample) {
 8000332:	b580      	push	{r7, lr}
 8000334:	b084      	sub	sp, #16
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	ed87 0a00 	vstr	s0, [r7]
		if (!is_initialized)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	7a5b      	ldrb	r3, [r3, #9]
 8000342:	f083 0301 	eor.w	r3, r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d155      	bne.n	80003f8 <_ZN10Transducer10play_soundEf+0xc6>
			return; // return if tim has not been initialized yet

		// ensure that sample <= 1.0 so that CCR is <= ARR
		if (sample <= 1.0) {
 800034c:	edd7 7a00 	vldr	s15, [r7]
 8000350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800035c:	d848      	bhi.n	80003f0 <_ZN10Transducer10play_soundEf+0xbe>
			uint16_t duty_cycle = static_cast<uint16_t>(sample * tim->Instance->ARR);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000366:	ee07 3a90 	vmov	s15, r3
 800036a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800036e:	edd7 7a00 	vldr	s15, [r7]
 8000372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800037a:	ee17 3a90 	vmov	r3, s15
 800037e:	81fb      	strh	r3, [r7, #14]
			__HAL_TIM_SET_COMPARE(tim, pwm_channel, duty_cycle);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	889b      	ldrh	r3, [r3, #4]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d105      	bne.n	8000394 <_ZN10Transducer10play_soundEf+0x62>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	89fa      	ldrh	r2, [r7, #14]
 8000390:	635a      	str	r2, [r3, #52]	@ 0x34
 8000392:	e032      	b.n	80003fa <_ZN10Transducer10play_soundEf+0xc8>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	889b      	ldrh	r3, [r3, #4]
 8000398:	2b04      	cmp	r3, #4
 800039a:	d105      	bne.n	80003a8 <_ZN10Transducer10play_soundEf+0x76>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	89fa      	ldrh	r2, [r7, #14]
 80003a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80003a6:	e028      	b.n	80003fa <_ZN10Transducer10play_soundEf+0xc8>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	889b      	ldrh	r3, [r3, #4]
 80003ac:	2b08      	cmp	r3, #8
 80003ae:	d105      	bne.n	80003bc <_ZN10Transducer10play_soundEf+0x8a>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	89fa      	ldrh	r2, [r7, #14]
 80003b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003ba:	e01e      	b.n	80003fa <_ZN10Transducer10play_soundEf+0xc8>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	889b      	ldrh	r3, [r3, #4]
 80003c0:	2b0c      	cmp	r3, #12
 80003c2:	d105      	bne.n	80003d0 <_ZN10Transducer10play_soundEf+0x9e>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	89fa      	ldrh	r2, [r7, #14]
 80003cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80003ce:	e014      	b.n	80003fa <_ZN10Transducer10play_soundEf+0xc8>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	889b      	ldrh	r3, [r3, #4]
 80003d4:	2b10      	cmp	r3, #16
 80003d6:	d105      	bne.n	80003e4 <_ZN10Transducer10play_soundEf+0xb2>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	89fa      	ldrh	r2, [r7, #14]
 80003e0:	649a      	str	r2, [r3, #72]	@ 0x48
 80003e2:	e00a      	b.n	80003fa <_ZN10Transducer10play_soundEf+0xc8>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	89fa      	ldrh	r2, [r7, #14]
 80003ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80003ee:	e004      	b.n	80003fa <_ZN10Transducer10play_soundEf+0xc8>
		} else {
			stop(); // stop if invalid sample value
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f805 	bl	8000400 <_ZN10Transducer4stopEv>
 80003f6:	e000      	b.n	80003fa <_ZN10Transducer10play_soundEf+0xc8>
			return; // return if tim has not been initialized yet
 80003f8:	bf00      	nop
		}
	}
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <_ZN10Transducer4stopEv>:

	// play no noise by setting duty cycle to zero
	void stop() {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE(tim, pwm_channel, 0);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	889b      	ldrh	r3, [r3, #4]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d105      	bne.n	800041c <_ZN10Transducer4stopEv+0x1c>
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2200      	movs	r2, #0
 8000418:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 800041a:	e02c      	b.n	8000476 <_ZN10Transducer4stopEv+0x76>
		__HAL_TIM_SET_COMPARE(tim, pwm_channel, 0);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	889b      	ldrh	r3, [r3, #4]
 8000420:	2b04      	cmp	r3, #4
 8000422:	d105      	bne.n	8000430 <_ZN10Transducer4stopEv+0x30>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2200      	movs	r2, #0
 800042c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 800042e:	e022      	b.n	8000476 <_ZN10Transducer4stopEv+0x76>
		__HAL_TIM_SET_COMPARE(tim, pwm_channel, 0);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	889b      	ldrh	r3, [r3, #4]
 8000434:	2b08      	cmp	r3, #8
 8000436:	d105      	bne.n	8000444 <_ZN10Transducer4stopEv+0x44>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 8000442:	e018      	b.n	8000476 <_ZN10Transducer4stopEv+0x76>
		__HAL_TIM_SET_COMPARE(tim, pwm_channel, 0);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	889b      	ldrh	r3, [r3, #4]
 8000448:	2b0c      	cmp	r3, #12
 800044a:	d105      	bne.n	8000458 <_ZN10Transducer4stopEv+0x58>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2200      	movs	r2, #0
 8000454:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8000456:	e00e      	b.n	8000476 <_ZN10Transducer4stopEv+0x76>
		__HAL_TIM_SET_COMPARE(tim, pwm_channel, 0);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	889b      	ldrh	r3, [r3, #4]
 800045c:	2b10      	cmp	r3, #16
 800045e:	d105      	bne.n	800046c <_ZN10Transducer4stopEv+0x6c>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2200      	movs	r2, #0
 8000468:	649a      	str	r2, [r3, #72]	@ 0x48
	}
 800046a:	e004      	b.n	8000476 <_ZN10Transducer4stopEv+0x76>
		__HAL_TIM_SET_COMPARE(tim, pwm_channel, 0);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <_ZN10TransducerC1Ev>:
	Transducer() = default;
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	725a      	strb	r2, [r3, #9]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4618      	mov	r0, r3
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <_Z10event_loopv>:

uint8_t current_sample = 0;
float audio_samples[NUM_SAMPLES] = {1.0f, 0.5f, 0.0f, 0.5f, 1.0f, 0.5f, 0.0f, 0.5f};
Transducer t;

void event_loop() {
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
	while (true) {}
 80004a2:	bf00      	nop
 80004a4:	e7fd      	b.n	80004a2 <_Z10event_loopv+0x4>
	...

080004a8 <_Z4initv>:
}

void init() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
	t = Transducer(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, NUM_SAMPLES);
 80004ae:	1d38      	adds	r0, r7, #4
 80004b0:	2308      	movs	r3, #8
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2304      	movs	r3, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	4906      	ldr	r1, [pc, #24]	@ (80004d4 <_Z4initv+0x2c>)
 80004ba:	f7ff fead 	bl	8000218 <_ZN10TransducerC1EP17TIM_HandleTypeDeftth>
 80004be:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <_Z4initv+0x30>)
 80004c0:	1d3a      	adds	r2, r7, #4
 80004c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004c4:	c303      	stmia	r3!, {r0, r1}
 80004c6:	801a      	strh	r2, [r3, #0]
	event_loop();
 80004c8:	f7ff ffe9 	bl	800049e <_Z10event_loopv>
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000058 	.word	0x20000058
 80004d8:	2000004c 	.word	0x2000004c

080004dc <HAL_TIM_OC_DelayElapsedCallback>:


extern "C" {

// this callback is hit when the transducer sampling timer ccr value is reached
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	// check that the timer and
    if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a11      	ldr	r2, [pc, #68]	@ (8000530 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d11c      	bne.n	8000528 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7f1b      	ldrb	r3, [r3, #28]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d118      	bne.n	8000528 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
    	t.play_sound(audio_samples[current_sample]);
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000538 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	edd3 7a00 	vldr	s15, [r3]
 8000504:	eeb0 0a67 	vmov.f32	s0, s15
 8000508:	480c      	ldr	r0, [pc, #48]	@ (800053c <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 800050a:	f7ff ff12 	bl	8000332 <_ZN10Transducer10play_soundEf>
    	current_sample = (current_sample + 1) % NUM_SAMPLES;
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	425a      	negs	r2, r3
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	f002 0207 	and.w	r2, r2, #7
 800051e:	bf58      	it	pl
 8000520:	4253      	negpl	r3, r2
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b03      	ldr	r3, [pc, #12]	@ (8000534 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000526:	701a      	strb	r2, [r3, #0]
    }
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40012c00 	.word	0x40012c00
 8000534:	20000048 	.word	0x20000048
 8000538:	20000000 	.word	0x20000000
 800053c:	2000004c 	.word	0x2000004c

08000540 <HAL_PostInit>:

// called by main.h allows for C++ projects
void HAL_PostInit() {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    init();
 8000544:	f7ff ffb0 	bl	80004a8 <_Z4initv>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <_Z41__static_initialization_and_destruction_0v>:

}
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
Transducer t;
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <_Z41__static_initialization_and_destruction_0v+0x10>)
 8000552:	f7ff ff96 	bl	8000482 <_ZN10TransducerC1Ev>
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000004c 	.word	0x2000004c

08000560 <_GLOBAL__sub_I_current_sample>:
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
 8000564:	f7ff fff2 	bl	800054c <_Z41__static_initialization_and_destruction_0v>
 8000568:	bd80      	pop	{r7, pc}

0800056a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa1c 	bl	80009aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f808 	bl	8000586 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8f1 	bl	800075c <MX_GPIO_Init>
  MX_TIM1_Init();
 800057a:	f000 f845 	bl	8000608 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_PostInit();
 800057e:	f7ff ffdf 	bl	8000540 <HAL_PostInit>
  while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x18>

08000586 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b094      	sub	sp, #80	@ 0x50
 800058a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	2238      	movs	r2, #56	@ 0x38
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fdcd 	bl	8003134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ac:	f000 fd00 	bl	8000fb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2340      	movs	r3, #64	@ 0x40
 80005bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fda6 	bl	8001118 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005d2:	f000 f8db 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005da:	2301      	movs	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f8a4 	bl	800173c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005fa:	f000 f8c7 	bl	800078c <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	@ 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b098      	sub	sp, #96	@ 0x60
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2234      	movs	r2, #52	@ 0x34
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fd7d 	bl	8003134 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800063a:	4b46      	ldr	r3, [pc, #280]	@ (8000754 <MX_TIM1_Init+0x14c>)
 800063c:	4a46      	ldr	r2, [pc, #280]	@ (8000758 <MX_TIM1_Init+0x150>)
 800063e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000640:	4b44      	ldr	r3, [pc, #272]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b43      	ldr	r3, [pc, #268]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 800064c:	4b41      	ldr	r3, [pc, #260]	@ (8000754 <MX_TIM1_Init+0x14c>)
 800064e:	f240 7207 	movw	r2, #1799	@ 0x707
 8000652:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b3f      	ldr	r3, [pc, #252]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800065a:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <MX_TIM1_Init+0x14c>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000666:	483b      	ldr	r0, [pc, #236]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000668:	f001 fbfa 	bl	8001e60 <HAL_TIM_PWM_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f88b 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000676:	4837      	ldr	r0, [pc, #220]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000678:	f001 fa44 	bl	8001b04 <HAL_TIM_OC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000682:	f000 f883 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000692:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000696:	4619      	mov	r1, r3
 8000698:	482e      	ldr	r0, [pc, #184]	@ (8000754 <MX_TIM1_Init+0x14c>)
 800069a:	f002 fbf7 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80006a4:	f000 f872 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a8:	2360      	movs	r3, #96	@ 0x60
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b0:	2300      	movs	r3, #0
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b4:	2300      	movs	r3, #0
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	4821      	ldr	r0, [pc, #132]	@ (8000754 <MX_TIM1_Init+0x14c>)
 80006ce:	f001 fee9 	bl	80024a4 <HAL_TIM_PWM_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80006d8:	f000 f858 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006e4:	2204      	movs	r2, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	481a      	ldr	r0, [pc, #104]	@ (8000754 <MX_TIM1_Init+0x14c>)
 80006ea:	f001 fe61 	bl	80023b0 <HAL_TIM_OC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80006f4:	f000 f84a 	bl	800078c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800071e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4807      	ldr	r0, [pc, #28]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000736:	f002 fc2b 	bl	8002f90 <HAL_TIMEx_ConfigBreakDeadTime>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000740:	f000 f824 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <MX_TIM1_Init+0x14c>)
 8000746:	f000 f879 	bl	800083c <HAL_TIM_MspPostInit>

}
 800074a:	bf00      	nop
 800074c:	3760      	adds	r7, #96	@ 0x60
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000058 	.word	0x20000058
 8000758:	40012c00 	.word	0x40012c00

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_GPIO_Init+0x2c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a08      	ldr	r2, [pc, #32]	@ (8000788 <MX_GPIO_Init+0x2c>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_GPIO_Init+0x2c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <Error_Handler+0x8>

08000798 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_MspInit+0x44>)
 80007a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <HAL_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <HAL_MspInit+0x44>)
 80007b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <HAL_MspInit+0x44>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ce:	f000 fc93 	bl	80010f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <HAL_TIM_PWM_MspInit+0x54>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d11b      	bne.n	800082a <HAL_TIM_PWM_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <HAL_TIM_PWM_MspInit+0x58>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f6:	4a10      	ldr	r2, [pc, #64]	@ (8000838 <HAL_TIM_PWM_MspInit+0x58>)
 80007f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <HAL_TIM_PWM_MspInit+0x58>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2019      	movs	r0, #25
 8000810:	f000 fa17 	bl	8000c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000814:	2019      	movs	r0, #25
 8000816:	f000 fa2e 	bl	8000c76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	201b      	movs	r0, #27
 8000820:	f000 fa0f 	bl	8000c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000824:	201b      	movs	r0, #27
 8000826:	f000 fa26 	bl	8000c76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40012c00 	.word	0x40012c00
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <HAL_TIM_MspPostInit+0x64>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d11b      	bne.n	8000896 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_TIM_MspPostInit+0x68>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <HAL_TIM_MspPostInit+0x68>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <HAL_TIM_MspPostInit+0x68>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000876:	2303      	movs	r3, #3
 8000878:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <HAL_TIM_MspPostInit+0x6c>)
 8000892:	f000 fa0b 	bl	8000cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <NMI_Handler+0x4>

080008b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <MemManage_Handler+0x4>

080008c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000902:	f000 f8a5 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000912:	f001 fbfd 	bl	8002110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000058 	.word	0x20000058

08000920 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <TIM1_CC_IRQHandler+0x10>)
 8000926:	f001 fbf3 	bl	8002110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000058 	.word	0x20000058

08000934 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 fbdd 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098a:	f7ff fdee 	bl	800056a <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800099c:	080031c0 	.word	0x080031c0
  ldr r2, =_sbss
 80009a0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80009a4:	200000a8 	.word	0x200000a8

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>

080009aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f939 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ba:	200f      	movs	r0, #15
 80009bc:	f000 f80e 	bl	80009dc <HAL_InitTick>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	e001      	b.n	80009d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009cc:	f7ff fee4 	bl	8000798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d0:	79fb      	ldrb	r3, [r7, #7]

}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_InitTick+0x68>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d022      	beq.n	8000a36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_InitTick+0x6c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <HAL_InitTick+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f944 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10f      	bne.n	8000a30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d809      	bhi.n	8000a2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a16:	2200      	movs	r2, #0
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a1e:	f000 f910 	bl	8000c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_InitTick+0x70>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	e007      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e004      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e001      	b.n	8000a3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000028 	.word	0x20000028
 8000a48:	20000020 	.word	0x20000020
 8000a4c:	20000024 	.word	0x20000024

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <HAL_IncTick+0x1c>)
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	200000a4 	.word	0x200000a4
 8000a70:	20000028 	.word	0x20000028

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000a4 	.word	0x200000a4

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff29 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff40 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff90 	bl	8000b80 <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5f 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff33 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa4 	bl	8000be8 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cba:	e15a      	b.n	8000f72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 814c 	beq.w	8000f6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d005      	beq.n	8000cec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d130      	bne.n	8000d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d22:	2201      	movs	r2, #1
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	f003 0201 	and.w	r2, r3, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d017      	beq.n	8000d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d123      	bne.n	8000dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	691a      	ldr	r2, [r3, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	6939      	ldr	r1, [r7, #16]
 8000dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0203 	and.w	r2, r3, #3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80a6 	beq.w	8000f6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e20:	4b5b      	ldr	r3, [pc, #364]	@ (8000f90 <HAL_GPIO_Init+0x2e4>)
 8000e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e24:	4a5a      	ldr	r2, [pc, #360]	@ (8000f90 <HAL_GPIO_Init+0x2e4>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2c:	4b58      	ldr	r3, [pc, #352]	@ (8000f90 <HAL_GPIO_Init+0x2e4>)
 8000e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e38:	4a56      	ldr	r2, [pc, #344]	@ (8000f94 <HAL_GPIO_Init+0x2e8>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e62:	d01f      	beq.n	8000ea4 <HAL_GPIO_Init+0x1f8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4c      	ldr	r2, [pc, #304]	@ (8000f98 <HAL_GPIO_Init+0x2ec>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d019      	beq.n	8000ea0 <HAL_GPIO_Init+0x1f4>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a4b      	ldr	r2, [pc, #300]	@ (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d013      	beq.n	8000e9c <HAL_GPIO_Init+0x1f0>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a4a      	ldr	r2, [pc, #296]	@ (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d00d      	beq.n	8000e98 <HAL_GPIO_Init+0x1ec>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a49      	ldr	r2, [pc, #292]	@ (8000fa4 <HAL_GPIO_Init+0x2f8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d007      	beq.n	8000e94 <HAL_GPIO_Init+0x1e8>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a48      	ldr	r2, [pc, #288]	@ (8000fa8 <HAL_GPIO_Init+0x2fc>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d101      	bne.n	8000e90 <HAL_GPIO_Init+0x1e4>
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	e00a      	b.n	8000ea6 <HAL_GPIO_Init+0x1fa>
 8000e90:	2306      	movs	r3, #6
 8000e92:	e008      	b.n	8000ea6 <HAL_GPIO_Init+0x1fa>
 8000e94:	2304      	movs	r3, #4
 8000e96:	e006      	b.n	8000ea6 <HAL_GPIO_Init+0x1fa>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e004      	b.n	8000ea6 <HAL_GPIO_Init+0x1fa>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e002      	b.n	8000ea6 <HAL_GPIO_Init+0x1fa>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <HAL_GPIO_Init+0x1fa>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb6:	4937      	ldr	r1, [pc, #220]	@ (8000f94 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec4:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee8:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eee:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f12:	4a26      	ldr	r2, [pc, #152]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f18:	4b24      	ldr	r3, [pc, #144]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f66:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f47f ae9d 	bne.w	8000cbc <HAL_GPIO_Init+0x10>
  }
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	48000c00 	.word	0x48000c00
 8000fa4:	48001000 	.word	0x48001000
 8000fa8:	48001400 	.word	0x48001400
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d141      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fca:	d131      	bne.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fcc:	4b47      	ldr	r3, [pc, #284]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd2:	4a46      	ldr	r2, [pc, #280]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	4b43      	ldr	r3, [pc, #268]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fe4:	4a41      	ldr	r2, [pc, #260]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fec:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2232      	movs	r2, #50	@ 0x32
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80010f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	0c9b      	lsrs	r3, r3, #18
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001002:	e002      	b.n	800100a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3b01      	subs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800100a:	4b38      	ldr	r3, [pc, #224]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001016:	d102      	bne.n	800101e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f2      	bne.n	8001004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800101e:	4b33      	ldr	r3, [pc, #204]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800102a:	d158      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e057      	b.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001030:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001036:	4a2d      	ldr	r2, [pc, #180]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800103c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001040:	e04d      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001048:	d141      	bne.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001056:	d131      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800105e:	4a23      	ldr	r2, [pc, #140]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001070:	4a1e      	ldr	r2, [pc, #120]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2232      	movs	r2, #50	@ 0x32
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	4a1c      	ldr	r2, [pc, #112]	@ (80010f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108e:	e002      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3b01      	subs	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a2:	d102      	bne.n	80010aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f2      	bne.n	8001090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b6:	d112      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e011      	b.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80010cc:	e007      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40007000 	.word	0x40007000
 80010f0:	20000020 	.word	0x20000020
 80010f4:	431bde83 	.word	0x431bde83

080010f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001106:	6093      	str	r3, [r2, #8]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40007000 	.word	0x40007000

08001118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e2fe      	b.n	8001728 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d075      	beq.n	8001222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001136:	4b97      	ldr	r3, [pc, #604]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001140:	4b94      	ldr	r3, [pc, #592]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d102      	bne.n	8001156 <HAL_RCC_OscConfig+0x3e>
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d002      	beq.n	800115c <HAL_RCC_OscConfig+0x44>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b08      	cmp	r3, #8
 800115a:	d10b      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	4b8d      	ldr	r3, [pc, #564]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05b      	beq.n	8001220 <HAL_RCC_OscConfig+0x108>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d157      	bne.n	8001220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e2d9      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117c:	d106      	bne.n	800118c <HAL_RCC_OscConfig+0x74>
 800117e:	4b85      	ldr	r3, [pc, #532]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a84      	ldr	r2, [pc, #528]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01d      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b7f      	ldr	r3, [pc, #508]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a7e      	ldr	r2, [pc, #504]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 80011b0:	4b78      	ldr	r3, [pc, #480]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a77      	ldr	r2, [pc, #476]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b75      	ldr	r3, [pc, #468]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a74      	ldr	r2, [pc, #464]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc50 	bl	8000a74 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc4c 	bl	8000a74 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	@ 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e29e      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xc0>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc3c 	bl	8000a74 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fc38 	bl	8000a74 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	@ 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e28a      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001212:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0xe8>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d075      	beq.n	800131a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122e:	4b59      	ldr	r3, [pc, #356]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001238:	4b56      	ldr	r3, [pc, #344]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d102      	bne.n	800124e <HAL_RCC_OscConfig+0x136>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d002      	beq.n	8001254 <HAL_RCC_OscConfig+0x13c>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d11f      	bne.n	8001294 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001254:	4b4f      	ldr	r3, [pc, #316]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_OscConfig+0x154>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e25d      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b49      	ldr	r3, [pc, #292]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	061b      	lsls	r3, r3, #24
 800127a:	4946      	ldr	r1, [pc, #280]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001280:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <HAL_RCC_OscConfig+0x280>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fba9 	bl	80009dc <HAL_InitTick>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d043      	beq.n	8001318 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e249      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d023      	beq.n	80012e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129c:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fbe4 	bl	8000a74 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fbe0 	bl	8000a74 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e232      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	061b      	lsls	r3, r3, #24
 80012dc:	492d      	ldr	r1, [pc, #180]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e01a      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 80012ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fbc0 	bl	8000a74 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fbbc 	bl	8000a74 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e20e      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1e0>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d041      	beq.n	80013aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01c      	beq.n	8001368 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001334:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fb99 	bl	8000a74 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fb95 	bl	8000a74 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1e7      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0ef      	beq.n	8001346 <HAL_RCC_OscConfig+0x22e>
 8001366:	e020      	b.n	80013aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001378:	f7ff fb7c 	bl	8000a74 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800137e:	e00d      	b.n	800139c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fb78 	bl	8000a74 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d906      	bls.n	800139c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1ca      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800139c:	4b8c      	ldr	r3, [pc, #560]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 800139e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ea      	bne.n	8001380 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80a6 	beq.w	8001504 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013bc:	4b84      	ldr	r3, [pc, #528]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_OscConfig+0x2b4>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x2b6>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00d      	beq.n	80013ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	4a7e      	ldr	r2, [pc, #504]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ee:	4b79      	ldr	r3, [pc, #484]	@ (80015d4 <HAL_RCC_OscConfig+0x4bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013fa:	4b76      	ldr	r3, [pc, #472]	@ (80015d4 <HAL_RCC_OscConfig+0x4bc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a75      	ldr	r2, [pc, #468]	@ (80015d4 <HAL_RCC_OscConfig+0x4bc>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb35 	bl	8000a74 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff fb31 	bl	8000a74 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e183      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001420:	4b6c      	ldr	r3, [pc, #432]	@ (80015d4 <HAL_RCC_OscConfig+0x4bc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d108      	bne.n	8001446 <HAL_RCC_OscConfig+0x32e>
 8001434:	4b66      	ldr	r3, [pc, #408]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143a:	4a65      	ldr	r2, [pc, #404]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001444:	e024      	b.n	8001490 <HAL_RCC_OscConfig+0x378>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d110      	bne.n	8001470 <HAL_RCC_OscConfig+0x358>
 800144e:	4b60      	ldr	r3, [pc, #384]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001454:	4a5e      	ldr	r2, [pc, #376]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800145e:	4b5c      	ldr	r3, [pc, #368]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001464:	4a5a      	ldr	r2, [pc, #360]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x378>
 8001470:	4b57      	ldr	r3, [pc, #348]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001476:	4a56      	ldr	r2, [pc, #344]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001480:	4b53      	ldr	r3, [pc, #332]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001486:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d016      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff faec 	bl	8000a74 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff fae8 	bl	8000a74 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e138      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b6:	4b46      	ldr	r3, [pc, #280]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ed      	beq.n	80014a0 <HAL_RCC_OscConfig+0x388>
 80014c4:	e015      	b.n	80014f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff fad5 	bl	8000a74 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fad1 	bl	8000a74 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e121      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e4:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80014e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ed      	bne.n	80014ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b35      	ldr	r3, [pc, #212]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	4a34      	ldr	r2, [pc, #208]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d03c      	beq.n	800158a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01c      	beq.n	8001552 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001518:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 800151a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800151e:	4a2c      	ldr	r2, [pc, #176]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff faa4 	bl	8000a74 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001530:	f7ff faa0 	bl	8000a74 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e0f2      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001544:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ef      	beq.n	8001530 <HAL_RCC_OscConfig+0x418>
 8001550:	e01b      	b.n	800158a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001552:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001558:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fa87 	bl	8000a74 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800156a:	f7ff fa83 	bl	8000a74 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0d5      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 800157e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ef      	bne.n	800156a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80c9 	beq.w	8001726 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001594:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b0c      	cmp	r3, #12
 800159e:	f000 8083 	beq.w	80016a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d15e      	bne.n	8001668 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fa5d 	bl	8000a74 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015bc:	e00c      	b.n	80015d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fa59 	bl	8000a74 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d905      	bls.n	80015d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0ab      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d8:	4b55      	ldr	r3, [pc, #340]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ec      	bne.n	80015be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e4:	4b52      	ldr	r3, [pc, #328]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b52      	ldr	r3, [pc, #328]	@ (8001734 <HAL_RCC_OscConfig+0x61c>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6a11      	ldr	r1, [r2, #32]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015f4:	3a01      	subs	r2, #1
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	4311      	orrs	r1, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80015fe:	0212      	lsls	r2, r2, #8
 8001600:	4311      	orrs	r1, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001606:	0852      	lsrs	r2, r2, #1
 8001608:	3a01      	subs	r2, #1
 800160a:	0552      	lsls	r2, r2, #21
 800160c:	4311      	orrs	r1, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001612:	0852      	lsrs	r2, r2, #1
 8001614:	3a01      	subs	r2, #1
 8001616:	0652      	lsls	r2, r2, #25
 8001618:	4311      	orrs	r1, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800161e:	06d2      	lsls	r2, r2, #27
 8001620:	430a      	orrs	r2, r1
 8001622:	4943      	ldr	r1, [pc, #268]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 8001624:	4313      	orrs	r3, r2
 8001626:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a40      	ldr	r2, [pc, #256]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001634:	4b3e      	ldr	r3, [pc, #248]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a3d      	ldr	r2, [pc, #244]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800163e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fa18 	bl	8000a74 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa14 	bl	8000a74 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e066      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165a:	4b35      	ldr	r3, [pc, #212]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x530>
 8001666:	e05e      	b.n	8001726 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a30      	ldr	r2, [pc, #192]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff f9fe 	bl	8000a74 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f9fa 	bl	8000a74 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e04c      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168e:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800169a:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4924      	ldr	r1, [pc, #144]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 80016a0:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <HAL_RCC_OscConfig+0x620>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	60cb      	str	r3, [r1, #12]
 80016a6:	e03e      	b.n	8001726 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e039      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <HAL_RCC_OscConfig+0x618>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0203 	and.w	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d12c      	bne.n	8001722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	3b01      	subs	r3, #1
 80016d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d123      	bne.n	8001722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11b      	bne.n	8001722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d113      	bne.n	8001722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d109      	bne.n	8001722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	019f800c 	.word	0x019f800c
 8001738:	feeefffc 	.word	0xfeeefffc

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e11e      	b.n	8001992 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b91      	ldr	r3, [pc, #580]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d910      	bls.n	8001784 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b8e      	ldr	r3, [pc, #568]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 020f 	bic.w	r2, r3, #15
 800176a:	498c      	ldr	r1, [pc, #560]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b8a      	ldr	r3, [pc, #552]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e106      	b.n	8001992 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d073      	beq.n	8001878 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d129      	bne.n	80017ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001798:	4b81      	ldr	r3, [pc, #516]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0f4      	b.n	8001992 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017a8:	f000 f966 	bl	8001a78 <RCC_GetSysClockFreqFromPLLSource>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4a7c      	ldr	r2, [pc, #496]	@ (80019a4 <HAL_RCC_ClockConfig+0x268>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d93f      	bls.n	8001836 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017b6:	4b7a      	ldr	r3, [pc, #488]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d033      	beq.n	8001836 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d12f      	bne.n	8001836 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017d6:	4b72      	ldr	r3, [pc, #456]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017de:	4a70      	ldr	r2, [pc, #448]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e024      	b.n	8001836 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f4:	4b6a      	ldr	r3, [pc, #424]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0c6      	b.n	8001992 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001804:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0be      	b.n	8001992 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001814:	f000 f8ce 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001818:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4a61      	ldr	r2, [pc, #388]	@ (80019a4 <HAL_RCC_ClockConfig+0x268>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d909      	bls.n	8001836 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001822:	4b5f      	ldr	r3, [pc, #380]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800182a:	4a5d      	ldr	r2, [pc, #372]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001830:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001836:	4b5a      	ldr	r3, [pc, #360]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 0203 	bic.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4957      	ldr	r1, [pc, #348]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001848:	f7ff f914 	bl	8000a74 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	e00a      	b.n	8001866 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f7ff f910 	bl	8000a74 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e095      	b.n	8001992 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	4b4e      	ldr	r3, [pc, #312]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 020c 	and.w	r2, r3, #12
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	429a      	cmp	r2, r3
 8001876:	d1eb      	bne.n	8001850 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001890:	4b43      	ldr	r3, [pc, #268]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a42      	ldr	r2, [pc, #264]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800189a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018a8:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80018b0:	4a3b      	ldr	r2, [pc, #236]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80018b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b39      	ldr	r3, [pc, #228]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4936      	ldr	r1, [pc, #216]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
 80018ca:	e008      	b.n	80018de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b80      	cmp	r3, #128	@ 0x80
 80018d0:	d105      	bne.n	80018de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018d2:	4b33      	ldr	r3, [pc, #204]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4a32      	ldr	r2, [pc, #200]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 80018d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018de:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d21d      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 020f 	bic.w	r2, r3, #15
 80018f4:	4929      	ldr	r1, [pc, #164]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018fc:	f7ff f8ba 	bl	8000a74 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff f8b6 	bl	8000a74 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e03b      	b.n	8001992 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_RCC_ClockConfig+0x260>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d1ed      	bne.n	8001904 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4917      	ldr	r1, [pc, #92]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	490f      	ldr	r1, [pc, #60]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001966:	f000 f825 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 800196a:	4602      	mov	r2, r0
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_RCC_ClockConfig+0x264>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	490c      	ldr	r1, [pc, #48]	@ (80019a8 <HAL_RCC_ClockConfig+0x26c>)
 8001978:	5ccb      	ldrb	r3, [r1, r3]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_RCC_ClockConfig+0x270>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_RCC_ClockConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f826 	bl	80009dc <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	04c4b400 	.word	0x04c4b400
 80019a8:	080031a4 	.word	0x080031a4
 80019ac:	20000020 	.word	0x20000020
 80019b0:	20000024 	.word	0x20000024

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ba:	4b2c      	ldr	r3, [pc, #176]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e047      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019cc:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d102      	bne.n	80019de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019d8:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e03e      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019de:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d136      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ea:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a08:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a12:	68d2      	ldr	r2, [r2, #12]
 8001a14:	0a12      	lsrs	r2, r2, #8
 8001a16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
      break;
 8001a20:	e00c      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a22:	4a13      	ldr	r2, [pc, #76]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2c:	68d2      	ldr	r2, [r2, #12]
 8001a2e:	0a12      	lsrs	r2, r2, #8
 8001a30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
      break;
 8001a3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0e5b      	lsrs	r3, r3, #25
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	3301      	adds	r3, #1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e001      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a5c:	693b      	ldr	r3, [r7, #16]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	007a1200 	.word	0x007a1200

08001a78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d10c      	bne.n	8001ab6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a9c:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aa6:	68d2      	ldr	r2, [r2, #12]
 8001aa8:	0a12      	lsrs	r2, r2, #8
 8001aaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
    break;
 8001ab4:	e00c      	b.n	8001ad0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ac0:	68d2      	ldr	r2, [r2, #12]
 8001ac2:	0a12      	lsrs	r2, r2, #8
 8001ac4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    break;
 8001ace:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0e5b      	lsrs	r3, r3, #25
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000
 8001afc:	007a1200 	.word	0x007a1200
 8001b00:	00f42400 	.word	0x00f42400

08001b04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e049      	b.n	8001baa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f841 	bl	8001bb2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f000 fdea 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_TIM_OC_Start_IT+0x28>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	e03c      	b.n	8001c6a <HAL_TIM_OC_Start_IT+0xa2>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d109      	bne.n	8001c0a <HAL_TIM_OC_Start_IT+0x42>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	bf14      	ite	ne
 8001c02:	2301      	movne	r3, #1
 8001c04:	2300      	moveq	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e02f      	b.n	8001c6a <HAL_TIM_OC_Start_IT+0xa2>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d109      	bne.n	8001c24 <HAL_TIM_OC_Start_IT+0x5c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e022      	b.n	8001c6a <HAL_TIM_OC_Start_IT+0xa2>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d109      	bne.n	8001c3e <HAL_TIM_OC_Start_IT+0x76>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e015      	b.n	8001c6a <HAL_TIM_OC_Start_IT+0xa2>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b10      	cmp	r3, #16
 8001c42:	d109      	bne.n	8001c58 <HAL_TIM_OC_Start_IT+0x90>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e008      	b.n	8001c6a <HAL_TIM_OC_Start_IT+0xa2>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0e2      	b.n	8001e38 <HAL_TIM_OC_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_TIM_OC_Start_IT+0xba>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c80:	e023      	b.n	8001cca <HAL_TIM_OC_Start_IT+0x102>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d104      	bne.n	8001c92 <HAL_TIM_OC_Start_IT+0xca>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c90:	e01b      	b.n	8001cca <HAL_TIM_OC_Start_IT+0x102>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d104      	bne.n	8001ca2 <HAL_TIM_OC_Start_IT+0xda>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ca0:	e013      	b.n	8001cca <HAL_TIM_OC_Start_IT+0x102>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d104      	bne.n	8001cb2 <HAL_TIM_OC_Start_IT+0xea>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001cb0:	e00b      	b.n	8001cca <HAL_TIM_OC_Start_IT+0x102>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d104      	bne.n	8001cc2 <HAL_TIM_OC_Start_IT+0xfa>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cc0:	e003      	b.n	8001cca <HAL_TIM_OC_Start_IT+0x102>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d841      	bhi.n	8001d54 <HAL_TIM_OC_Start_IT+0x18c>
 8001cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <HAL_TIM_OC_Start_IT+0x110>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001d0d 	.word	0x08001d0d
 8001cdc:	08001d55 	.word	0x08001d55
 8001ce0:	08001d55 	.word	0x08001d55
 8001ce4:	08001d55 	.word	0x08001d55
 8001ce8:	08001d1f 	.word	0x08001d1f
 8001cec:	08001d55 	.word	0x08001d55
 8001cf0:	08001d55 	.word	0x08001d55
 8001cf4:	08001d55 	.word	0x08001d55
 8001cf8:	08001d31 	.word	0x08001d31
 8001cfc:	08001d55 	.word	0x08001d55
 8001d00:	08001d55 	.word	0x08001d55
 8001d04:	08001d55 	.word	0x08001d55
 8001d08:	08001d43 	.word	0x08001d43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0202 	orr.w	r2, r2, #2
 8001d1a:	60da      	str	r2, [r3, #12]
      break;
 8001d1c:	e01d      	b.n	8001d5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0204 	orr.w	r2, r2, #4
 8001d2c:	60da      	str	r2, [r3, #12]
      break;
 8001d2e:	e014      	b.n	8001d5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	60da      	str	r2, [r3, #12]
      break;
 8001d40:	e00b      	b.n	8001d5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0210 	orr.w	r2, r2, #16
 8001d50:	60da      	str	r2, [r3, #12]
      break;
 8001d52:	e002      	b.n	8001d5a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
      break;
 8001d58:	bf00      	nop
  }

  if (status == HAL_OK)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d16a      	bne.n	8001e36 <HAL_TIM_OC_Start_IT+0x26e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2201      	movs	r2, #1
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 f869 	bl	8002e40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a33      	ldr	r2, [pc, #204]	@ (8001e40 <HAL_TIM_OC_Start_IT+0x278>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a31      	ldr	r2, [pc, #196]	@ (8001e44 <HAL_TIM_OC_Start_IT+0x27c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a30      	ldr	r2, [pc, #192]	@ (8001e48 <HAL_TIM_OC_Start_IT+0x280>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <HAL_TIM_OC_Start_IT+0x284>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <HAL_TIM_OC_Start_IT+0x288>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_TIM_OC_Start_IT+0x1dc>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_TIM_OC_Start_IT+0x1de>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <HAL_TIM_OC_Start_IT+0x278>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d018      	beq.n	8001df6 <HAL_TIM_OC_Start_IT+0x22e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dcc:	d013      	beq.n	8001df6 <HAL_TIM_OC_Start_IT+0x22e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a20      	ldr	r2, [pc, #128]	@ (8001e54 <HAL_TIM_OC_Start_IT+0x28c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_TIM_OC_Start_IT+0x22e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <HAL_TIM_OC_Start_IT+0x290>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d009      	beq.n	8001df6 <HAL_TIM_OC_Start_IT+0x22e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_TIM_OC_Start_IT+0x27c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_TIM_OC_Start_IT+0x22e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a15      	ldr	r2, [pc, #84]	@ (8001e48 <HAL_TIM_OC_Start_IT+0x280>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d115      	bne.n	8001e22 <HAL_TIM_OC_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_TIM_OC_Start_IT+0x294>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d015      	beq.n	8001e34 <HAL_TIM_OC_Start_IT+0x26c>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0e:	d011      	beq.n	8001e34 <HAL_TIM_OC_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e20:	e008      	b.n	8001e34 <HAL_TIM_OC_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e000      	b.n	8001e36 <HAL_TIM_OC_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40013400 	.word	0x40013400
 8001e48:	40014000 	.word	0x40014000
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40014800 	.word	0x40014800
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	00010007 	.word	0x00010007

08001e60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e049      	b.n	8001f06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fcaa 	bl	80007e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f000 fc3c 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_TIM_PWM_Start+0x24>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e03c      	b.n	8001fae <HAL_TIM_PWM_Start+0x9e>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d109      	bne.n	8001f4e <HAL_TIM_PWM_Start+0x3e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	e02f      	b.n	8001fae <HAL_TIM_PWM_Start+0x9e>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d109      	bne.n	8001f68 <HAL_TIM_PWM_Start+0x58>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	e022      	b.n	8001fae <HAL_TIM_PWM_Start+0x9e>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d109      	bne.n	8001f82 <HAL_TIM_PWM_Start+0x72>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	e015      	b.n	8001fae <HAL_TIM_PWM_Start+0x9e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d109      	bne.n	8001f9c <HAL_TIM_PWM_Start+0x8c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e008      	b.n	8001fae <HAL_TIM_PWM_Start+0x9e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e097      	b.n	80020e6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_PWM_Start+0xb6>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc4:	e023      	b.n	800200e <HAL_TIM_PWM_Start+0xfe>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_PWM_Start+0xc6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fd4:	e01b      	b.n	800200e <HAL_TIM_PWM_Start+0xfe>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0xd6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe4:	e013      	b.n	800200e <HAL_TIM_PWM_Start+0xfe>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_PWM_Start+0xe6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001ff4:	e00b      	b.n	800200e <HAL_TIM_PWM_Start+0xfe>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d104      	bne.n	8002006 <HAL_TIM_PWM_Start+0xf6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002004:	e003      	b.n	800200e <HAL_TIM_PWM_Start+0xfe>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 ff12 	bl	8002e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a33      	ldr	r2, [pc, #204]	@ (80020f0 <HAL_TIM_PWM_Start+0x1e0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_TIM_PWM_Start+0x13e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a32      	ldr	r2, [pc, #200]	@ (80020f4 <HAL_TIM_PWM_Start+0x1e4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_TIM_PWM_Start+0x13e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a30      	ldr	r2, [pc, #192]	@ (80020f8 <HAL_TIM_PWM_Start+0x1e8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_TIM_PWM_Start+0x13e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2f      	ldr	r2, [pc, #188]	@ (80020fc <HAL_TIM_PWM_Start+0x1ec>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_TIM_PWM_Start+0x13e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a2d      	ldr	r2, [pc, #180]	@ (8002100 <HAL_TIM_PWM_Start+0x1f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_TIM_PWM_Start+0x142>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_TIM_PWM_Start+0x144>
 8002052:	2300      	movs	r3, #0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002066:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a20      	ldr	r2, [pc, #128]	@ (80020f0 <HAL_TIM_PWM_Start+0x1e0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d018      	beq.n	80020a4 <HAL_TIM_PWM_Start+0x194>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207a:	d013      	beq.n	80020a4 <HAL_TIM_PWM_Start+0x194>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a20      	ldr	r2, [pc, #128]	@ (8002104 <HAL_TIM_PWM_Start+0x1f4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_TIM_PWM_Start+0x194>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <HAL_TIM_PWM_Start+0x1f8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_TIM_PWM_Start+0x194>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a17      	ldr	r2, [pc, #92]	@ (80020f4 <HAL_TIM_PWM_Start+0x1e4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_TIM_PWM_Start+0x194>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a16      	ldr	r2, [pc, #88]	@ (80020f8 <HAL_TIM_PWM_Start+0x1e8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d115      	bne.n	80020d0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <HAL_TIM_PWM_Start+0x1fc>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d015      	beq.n	80020e2 <HAL_TIM_PWM_Start+0x1d2>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020bc:	d011      	beq.n	80020e2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ce:	e008      	b.n	80020e2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e000      	b.n	80020e4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40013400 	.word	0x40013400
 80020f8:	40014000 	.word	0x40014000
 80020fc:	40014400 	.word	0x40014400
 8002100:	40014800 	.word	0x40014800
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	00010007 	.word	0x00010007

08002110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0202 	mvn.w	r2, #2
 8002144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fac0 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe f9ba 	bl	80004dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fac3 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0204 	mvn.w	r2, #4
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fa9a 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe f994 	bl	80004dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fa9d 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d020      	beq.n	800220c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0208 	mvn.w	r2, #8
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa74 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe f96e 	bl	80004dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fa77 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d020      	beq.n	8002258 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01b      	beq.n	8002258 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0210 	mvn.w	r2, #16
 8002228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2208      	movs	r2, #8
 800222e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa4e 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe f948 	bl	80004dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fa51 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00c      	beq.n	800227c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0201 	mvn.w	r2, #1
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa28 	bl	80026cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00c      	beq.n	80022aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80022a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 ff09 	bl	80030bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00c      	beq.n	80022ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80022c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 ff01 	bl	80030d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00c      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fa0b 	bl	8002708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00c      	beq.n	8002316 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f06f 0220 	mvn.w	r2, #32
 800230e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fec9 	bl	80030a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00c      	beq.n	800233a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fed5 	bl	80030e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00c      	beq.n	800235e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fecd 	bl	80030f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00c      	beq.n	8002382 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800237a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fec5 	bl	800310c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00c      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800239e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 febd 	bl	8003120 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e066      	b.n	800249c <HAL_TIM_OC_ConfigChannel+0xec>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b14      	cmp	r3, #20
 80023da:	d857      	bhi.n	800248c <HAL_TIM_OC_ConfigChannel+0xdc>
 80023dc:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	08002439 	.word	0x08002439
 80023e8:	0800248d 	.word	0x0800248d
 80023ec:	0800248d 	.word	0x0800248d
 80023f0:	0800248d 	.word	0x0800248d
 80023f4:	08002447 	.word	0x08002447
 80023f8:	0800248d 	.word	0x0800248d
 80023fc:	0800248d 	.word	0x0800248d
 8002400:	0800248d 	.word	0x0800248d
 8002404:	08002455 	.word	0x08002455
 8002408:	0800248d 	.word	0x0800248d
 800240c:	0800248d 	.word	0x0800248d
 8002410:	0800248d 	.word	0x0800248d
 8002414:	08002463 	.word	0x08002463
 8002418:	0800248d 	.word	0x0800248d
 800241c:	0800248d 	.word	0x0800248d
 8002420:	0800248d 	.word	0x0800248d
 8002424:	08002471 	.word	0x08002471
 8002428:	0800248d 	.word	0x0800248d
 800242c:	0800248d 	.word	0x0800248d
 8002430:	0800248d 	.word	0x0800248d
 8002434:	0800247f 	.word	0x0800247f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fa08 	bl	8002854 <TIM_OC1_SetConfig>
      break;
 8002444:	e025      	b.n	8002492 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fa91 	bl	8002974 <TIM_OC2_SetConfig>
      break;
 8002452:	e01e      	b.n	8002492 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fb14 	bl	8002a88 <TIM_OC3_SetConfig>
      break;
 8002460:	e017      	b.n	8002492 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fb95 	bl	8002b98 <TIM_OC4_SetConfig>
      break;
 800246e:	e010      	b.n	8002492 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fc18 	bl	8002cac <TIM_OC5_SetConfig>
      break;
 800247c:	e009      	b.n	8002492 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fc75 	bl	8002d74 <TIM_OC6_SetConfig>
      break;
 800248a:	e002      	b.n	8002492 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
      break;
 8002490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0ff      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b14      	cmp	r3, #20
 80024ce:	f200 80f0 	bhi.w	80026b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024d2:	a201      	add	r2, pc, #4	@ (adr r2, 80024d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	0800252d 	.word	0x0800252d
 80024dc:	080026b3 	.word	0x080026b3
 80024e0:	080026b3 	.word	0x080026b3
 80024e4:	080026b3 	.word	0x080026b3
 80024e8:	0800256d 	.word	0x0800256d
 80024ec:	080026b3 	.word	0x080026b3
 80024f0:	080026b3 	.word	0x080026b3
 80024f4:	080026b3 	.word	0x080026b3
 80024f8:	080025af 	.word	0x080025af
 80024fc:	080026b3 	.word	0x080026b3
 8002500:	080026b3 	.word	0x080026b3
 8002504:	080026b3 	.word	0x080026b3
 8002508:	080025ef 	.word	0x080025ef
 800250c:	080026b3 	.word	0x080026b3
 8002510:	080026b3 	.word	0x080026b3
 8002514:	080026b3 	.word	0x080026b3
 8002518:	08002631 	.word	0x08002631
 800251c:	080026b3 	.word	0x080026b3
 8002520:	080026b3 	.word	0x080026b3
 8002524:	080026b3 	.word	0x080026b3
 8002528:	08002671 	.word	0x08002671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f98e 	bl	8002854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0208 	orr.w	r2, r2, #8
 8002546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0204 	bic.w	r2, r2, #4
 8002556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6999      	ldr	r1, [r3, #24]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	619a      	str	r2, [r3, #24]
      break;
 800256a:	e0a5      	b.n	80026b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f9fe 	bl	8002974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6999      	ldr	r1, [r3, #24]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	021a      	lsls	r2, r3, #8
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	619a      	str	r2, [r3, #24]
      break;
 80025ac:	e084      	b.n	80026b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fa67 	bl	8002a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0208 	orr.w	r2, r2, #8
 80025c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0204 	bic.w	r2, r2, #4
 80025d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69d9      	ldr	r1, [r3, #28]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
      break;
 80025ec:	e064      	b.n	80026b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 facf 	bl	8002b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69d9      	ldr	r1, [r3, #28]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	61da      	str	r2, [r3, #28]
      break;
 800262e:	e043      	b.n	80026b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fb38 	bl	8002cac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800266e:	e023      	b.n	80026b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fb7c 	bl	8002d74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	021a      	lsls	r2, r3, #8
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80026b0:	e002      	b.n	80026b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
      break;
 80026b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop

080026cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a42      	ldr	r2, [pc, #264]	@ (8002838 <TIM_Base_SetConfig+0x11c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00f      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800273a:	d00b      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3f      	ldr	r2, [pc, #252]	@ (800283c <TIM_Base_SetConfig+0x120>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3e      	ldr	r2, [pc, #248]	@ (8002840 <TIM_Base_SetConfig+0x124>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3d      	ldr	r2, [pc, #244]	@ (8002844 <TIM_Base_SetConfig+0x128>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800275a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <TIM_Base_SetConfig+0x11c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01b      	beq.n	80027a6 <TIM_Base_SetConfig+0x8a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002774:	d017      	beq.n	80027a6 <TIM_Base_SetConfig+0x8a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a30      	ldr	r2, [pc, #192]	@ (800283c <TIM_Base_SetConfig+0x120>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <TIM_Base_SetConfig+0x8a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2f      	ldr	r2, [pc, #188]	@ (8002840 <TIM_Base_SetConfig+0x124>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00f      	beq.n	80027a6 <TIM_Base_SetConfig+0x8a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2e      	ldr	r2, [pc, #184]	@ (8002844 <TIM_Base_SetConfig+0x128>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00b      	beq.n	80027a6 <TIM_Base_SetConfig+0x8a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2d      	ldr	r2, [pc, #180]	@ (8002848 <TIM_Base_SetConfig+0x12c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <TIM_Base_SetConfig+0x8a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2c      	ldr	r2, [pc, #176]	@ (800284c <TIM_Base_SetConfig+0x130>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d003      	beq.n	80027a6 <TIM_Base_SetConfig+0x8a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002850 <TIM_Base_SetConfig+0x134>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d108      	bne.n	80027b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <TIM_Base_SetConfig+0x11c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00f      	beq.n	8002804 <TIM_Base_SetConfig+0xe8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a17      	ldr	r2, [pc, #92]	@ (8002844 <TIM_Base_SetConfig+0x128>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00b      	beq.n	8002804 <TIM_Base_SetConfig+0xe8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a16      	ldr	r2, [pc, #88]	@ (8002848 <TIM_Base_SetConfig+0x12c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <TIM_Base_SetConfig+0xe8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a15      	ldr	r2, [pc, #84]	@ (800284c <TIM_Base_SetConfig+0x130>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0xe8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <TIM_Base_SetConfig+0x134>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]
  }
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800
 8002844:	40013400 	.word	0x40013400
 8002848:	40014000 	.word	0x40014000
 800284c:	40014400 	.word	0x40014400
 8002850:	40014800 	.word	0x40014800

08002854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 0201 	bic.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 0302 	bic.w	r3, r3, #2
 80028a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002960 <TIM_OC1_SetConfig+0x10c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00f      	beq.n	80028d4 <TIM_OC1_SetConfig+0x80>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002964 <TIM_OC1_SetConfig+0x110>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_OC1_SetConfig+0x80>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a2a      	ldr	r2, [pc, #168]	@ (8002968 <TIM_OC1_SetConfig+0x114>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_OC1_SetConfig+0x80>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a29      	ldr	r2, [pc, #164]	@ (800296c <TIM_OC1_SetConfig+0x118>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_OC1_SetConfig+0x80>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <TIM_OC1_SetConfig+0x11c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10c      	bne.n	80028ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0308 	bic.w	r3, r3, #8
 80028da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002960 <TIM_OC1_SetConfig+0x10c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <TIM_OC1_SetConfig+0xc2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002964 <TIM_OC1_SetConfig+0x110>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_OC1_SetConfig+0xc2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <TIM_OC1_SetConfig+0x114>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_OC1_SetConfig+0xc2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a18      	ldr	r2, [pc, #96]	@ (800296c <TIM_OC1_SetConfig+0x118>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_OC1_SetConfig+0xc2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <TIM_OC1_SetConfig+0x11c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d111      	bne.n	800293a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800291c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	621a      	str	r2, [r3, #32]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40013400 	.word	0x40013400
 8002968:	40014000 	.word	0x40014000
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800

08002974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 0210 	bic.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0320 	bic.w	r3, r3, #32
 80029c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a28      	ldr	r2, [pc, #160]	@ (8002a74 <TIM_OC2_SetConfig+0x100>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_OC2_SetConfig+0x6c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a27      	ldr	r2, [pc, #156]	@ (8002a78 <TIM_OC2_SetConfig+0x104>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10d      	bne.n	80029fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <TIM_OC2_SetConfig+0x100>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00f      	beq.n	8002a24 <TIM_OC2_SetConfig+0xb0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	@ (8002a78 <TIM_OC2_SetConfig+0x104>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_OC2_SetConfig+0xb0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a7c <TIM_OC2_SetConfig+0x108>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_OC2_SetConfig+0xb0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <TIM_OC2_SetConfig+0x10c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_OC2_SetConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <TIM_OC2_SetConfig+0x110>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d113      	bne.n	8002a4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40013400 	.word	0x40013400
 8002a7c:	40014000 	.word	0x40014000
 8002a80:	40014400 	.word	0x40014400
 8002a84:	40014800 	.word	0x40014800

08002a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	@ (8002b84 <TIM_OC3_SetConfig+0xfc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <TIM_OC3_SetConfig+0x6a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a26      	ldr	r2, [pc, #152]	@ (8002b88 <TIM_OC3_SetConfig+0x100>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1c      	ldr	r2, [pc, #112]	@ (8002b84 <TIM_OC3_SetConfig+0xfc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00f      	beq.n	8002b36 <TIM_OC3_SetConfig+0xae>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1b      	ldr	r2, [pc, #108]	@ (8002b88 <TIM_OC3_SetConfig+0x100>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_OC3_SetConfig+0xae>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1a      	ldr	r2, [pc, #104]	@ (8002b8c <TIM_OC3_SetConfig+0x104>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_OC3_SetConfig+0xae>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <TIM_OC3_SetConfig+0x108>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_OC3_SetConfig+0xae>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a18      	ldr	r2, [pc, #96]	@ (8002b94 <TIM_OC3_SetConfig+0x10c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d113      	bne.n	8002b5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	621a      	str	r2, [r3, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40013400 	.word	0x40013400
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40014400 	.word	0x40014400
 8002b94:	40014800 	.word	0x40014800

08002b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	031b      	lsls	r3, r3, #12
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a28      	ldr	r2, [pc, #160]	@ (8002c98 <TIM_OC4_SetConfig+0x100>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_OC4_SetConfig+0x6c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a27      	ldr	r2, [pc, #156]	@ (8002c9c <TIM_OC4_SetConfig+0x104>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10d      	bne.n	8002c20 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	031b      	lsls	r3, r3, #12
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <TIM_OC4_SetConfig+0x100>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00f      	beq.n	8002c48 <TIM_OC4_SetConfig+0xb0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <TIM_OC4_SetConfig+0x104>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <TIM_OC4_SetConfig+0xb0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <TIM_OC4_SetConfig+0x108>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_OC4_SetConfig+0xb0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <TIM_OC4_SetConfig+0x10c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_OC4_SetConfig+0xb0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <TIM_OC4_SetConfig+0x110>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d113      	bne.n	8002c70 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c4e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c56:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	019b      	lsls	r3, r3, #6
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40013400 	.word	0x40013400
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	40014400 	.word	0x40014400
 8002ca8:	40014800 	.word	0x40014800

08002cac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002cf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a17      	ldr	r2, [pc, #92]	@ (8002d60 <TIM_OC5_SetConfig+0xb4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00f      	beq.n	8002d26 <TIM_OC5_SetConfig+0x7a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a16      	ldr	r2, [pc, #88]	@ (8002d64 <TIM_OC5_SetConfig+0xb8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <TIM_OC5_SetConfig+0x7a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <TIM_OC5_SetConfig+0xbc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <TIM_OC5_SetConfig+0x7a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <TIM_OC5_SetConfig+0xc0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_OC5_SetConfig+0x7a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a13      	ldr	r2, [pc, #76]	@ (8002d70 <TIM_OC5_SetConfig+0xc4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d109      	bne.n	8002d3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40013400 	.word	0x40013400
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800

08002d74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	051b      	lsls	r3, r3, #20
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <TIM_OC6_SetConfig+0xb8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00f      	beq.n	8002df0 <TIM_OC6_SetConfig+0x7c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a17      	ldr	r2, [pc, #92]	@ (8002e30 <TIM_OC6_SetConfig+0xbc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <TIM_OC6_SetConfig+0x7c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a16      	ldr	r2, [pc, #88]	@ (8002e34 <TIM_OC6_SetConfig+0xc0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_OC6_SetConfig+0x7c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a15      	ldr	r2, [pc, #84]	@ (8002e38 <TIM_OC6_SetConfig+0xc4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_OC6_SetConfig+0x7c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <TIM_OC6_SetConfig+0xc8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d109      	bne.n	8002e04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40013400 	.word	0x40013400
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800

08002e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2201      	movs	r2, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e065      	b.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002ede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1a:	d013      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a18      	ldr	r2, [pc, #96]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a13      	ldr	r2, [pc, #76]	@ (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10c      	bne.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40013400 	.word	0x40013400
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40014000 	.word	0x40014000

08002f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e073      	b.n	8003094 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a19      	ldr	r2, [pc, #100]	@ (80030a0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a18      	ldr	r2, [pc, #96]	@ (80030a4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d11c      	bne.n	8003082 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	051b      	lsls	r3, r3, #20
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40013400 	.word	0x40013400

080030a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <memset>:
 8003134:	4402      	add	r2, r0
 8003136:	4603      	mov	r3, r0
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	f803 1b01 	strb.w	r1, [r3], #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4d0d      	ldr	r5, [pc, #52]	@ (800317c <__libc_init_array+0x38>)
 8003148:	4c0d      	ldr	r4, [pc, #52]	@ (8003180 <__libc_init_array+0x3c>)
 800314a:	1b64      	subs	r4, r4, r5
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	2600      	movs	r6, #0
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	4d0b      	ldr	r5, [pc, #44]	@ (8003184 <__libc_init_array+0x40>)
 8003156:	4c0c      	ldr	r4, [pc, #48]	@ (8003188 <__libc_init_array+0x44>)
 8003158:	f000 f818 	bl	800318c <_init>
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	2600      	movs	r6, #0
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	080031b4 	.word	0x080031b4
 8003180:	080031b4 	.word	0x080031b4
 8003184:	080031b4 	.word	0x080031b4
 8003188:	080031bc 	.word	0x080031bc

0800318c <_init>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr

08003198 <_fini>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	bf00      	nop
 800319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319e:	bc08      	pop	{r3}
 80031a0:	469e      	mov	lr, r3
 80031a2:	4770      	bx	lr
